---
description: 
globs: 
alwaysApply: true
---
# 测试规范

## 测试分类

### 单元测试

1. **测试范围**
   - 所有核心逻辑函数必须有单元测试
   - 服务类的公共方法必须测试
   - 工具函数必须有完整测试用例

2. **测试结构**
   - 使用 Vitest 作为测试框架
   - 文件命名：`*.spec.ts` 或 `*.test.ts`
   - 测试文件与被测文件放置在相同目录或专门的 `__tests__` 目录

3. **测试用例编写**
   - 使用 `describe` 描述测试组，`it`/`test` 描述单个测试
   - 每个测试只关注一个特定行为
   - 确保测试间相互独立，不依赖执行顺序

### 组件测试

1. **测试内容**
   - 验证组件渲染是否正确
   - 验证组件交互行为（点击、输入等）
   - 验证 props 和 emits 的正确传递

2. **测试工具**
   - 使用 Vue Test Utils 进行组件测试
   - 使用 happy-dom 作为测试环境
   - 复杂 UI 交互可使用 Playwright 进行端到端测试

3. **测试场景**
   - 正确渲染默认状态
   - 响应用户输入
   - 条件渲染（如显示/隐藏元素）
   - props 变化时的组件更新

### 集成测试

1. **测试范围**
   - 多个组件协同工作的场景
   - 与数据库和第三方服务的交互
   - 路由和导航流程

2. **测试方法**
   - 尽量使用真实的组件和服务
   - 对外部服务可使用模拟（如数据库连接）
   - 关注组件之间的数据流和交互

### 端到端测试

1. **测试工具**
   - 使用 Playwright 进行端到端测试
   - 覆盖主要用户场景和流程

2. **测试范围**
   - 完整的用户工作流程
   - 关键功能和业务场景
   - 跨页面交互和数据持久化

## 测试编写原则

### 命名与组织

1. **测试命名**
   - 测试描述应清晰表达测试内容
   - 使用模式：`测试对象_条件_预期结果`
   - 例如：`formatSql_whenValidInput_shouldReturnFormattedSql`

2. **测试组织**
   - 相关测试应分组在同一个 `describe` 块中
   - 使用嵌套 `describe` 表示层次关系
   - 使用 `beforeEach`/`afterEach` 处理通用设置和清理

### 测试实践

1. **AAA 模式**
   - Arrange: 准备测试所需的数据和条件
   - Act: 执行被测试的代码
   - Assert: 验证结果是否符合预期

2. **测试边界情况**
   - 正常输入
   - 边界值
   - 无效输入和异常情况
   - 空值、null、undefined 等特殊情况

3. **避免测试陷阱**
   - 避免测试实现细节
   - 避免过度模拟（mock）
   - 避免脆弱测试（对细微变化敏感）
   - 避免过度规范（对不重要的格式要求过高）

## 测试覆盖率要求

1. **覆盖率目标**
   - 关键业务逻辑: 90% 以上
   - 工具函数: 85% 以上
   - UI 组件: 70% 以上
   - 整体项目: 75% 以上

2. **覆盖率类型**
   - 行覆盖率（Line Coverage）
   - 分支覆盖率（Branch Coverage）
   - 语句覆盖率（Statement Coverage）
   - 函数覆盖率（Function Coverage）

3. **覆盖率例外**
   - 第三方库的封装
   - 纯展示性组件
   - 明显正确的简单代码

## 测试执行

1. **执行时机**
   - 代码提交前执行本地测试
   - CI 流程中自动执行所有测试
   - 合并请求必须通过所有测试

2. **执行环境**
   - 开发环境（本地）
   - CI 环境（与生产环境相似）
   - 定期在不同操作系统上执行测试

3. **测试报告**
   - 保存测试覆盖率报告
   - 记录测试失败和修复历史
   - 定期审查测试质量
