---
description: 
globs: 
alwaysApply: true
---
# Element Plus 开发规范

## 已废弃 API 使用规范

### 按钮组件 (el-button)

1. **废弃:** `type="text"` 属性
   - **推荐:** 直接使用 `<el-button link>` 简写形式
   - **说明:** 从 Element Plus 3.0.0 版本开始，`type="text"` 将被完全废弃

   ```vue
   <!-- 不推荐 -->
   <el-button type="text">文本按钮</el-button>
   
   <!-- 推荐 -->
   <el-button link>文本按钮</el-button>
   ```
2. **废弃:** `type="default"` 属性
   - **推荐:** 不指定 type 属性，使用默认值
   - **说明:** 默认按钮不需要显式指定 type

   ```vue
   <!-- 不推荐 -->
   <el-button type="default">默认按钮</el-button>
   
   <!-- 推荐 -->
   <el-button>默认按钮</el-button>
   ```

### 表单组件 (el-form)

1. **废弃:** `validate` 方法的回调函数
   - **推荐:** 使用 Promise 方式处理表单验证
   - **说明:** 回调函数方式将在未来版本中废弃

   ```vue
   <!-- 不推荐 -->
   formRef.value.validate((valid) => {
     if (valid) {
       // 验证通过
     }
   })
   
   <!-- 推荐 -->
   try {
     await formRef.value.validate()
     // 验证通过
   } catch (error) {
     // 验证失败
   }
   ```

2. **废弃:** `resetFields()` 方法不传参数重置所有字段
   - **推荐:** 明确指定要重置的字段
   - **说明:** 无参数调用在某些情况下可能导致意外行为

   ```vue
   <!-- 不推荐 -->
   formRef.value.resetFields()
   
   <!-- 推荐 -->
   formRef.value.resetFields(['username', 'password'])
   ```

### 表格组件 (el-table)

1. **废弃:** `clearFilter` 不传参数清除所有过滤器
   - **推荐:** 明确指定要清除的列过滤器
   - **说明:** 无参数调用在复杂表格中可能导致意外行为

   ```vue
   <!-- 不推荐 -->
   tableRef.value.clearFilter()
   
   <!-- 推荐 -->
   tableRef.value.clearFilter(['date', 'name'])
   ```

### 对话框组件 (el-dialog)

1. **废弃:** `close-on-click-modal` 属性默认值变更
   - **推荐:** 明确指定此属性的值
   - **说明:** 未来版本默认值可能从 true 变为 false

   ```vue
   <!-- 推荐 (根据需求设置) -->
   <el-dialog :close-on-click-modal="false">
     <!-- 内容 -->
   </el-dialog>
   ```

### 消息提示 (ElMessage)

1. **废弃:** 直接传入字符串的用法
   - **推荐:** 使用配置对象方式
   - **说明:** 配置对象提供更一致的 API 体验

   ```vue
   <!-- 不推荐 -->
   ElMessage('这是一条消息')
   
   <!-- 推荐 -->
   ElMessage({ message: '这是一条消息' })
   ```

## 通用最佳实践

1. **组件尺寸:**
   - 优先使用全局配置的尺寸，避免在每个组件上单独设置 size 属性
   - 需要自定义尺寸时，使用 size 属性而非自定义样式

2. **国际化支持:**
   - 使用 Element Plus 提供的国际化机制，避免硬编码文案
   - 配置全局的语言包，保持一致的用户体验

3. **主题定制:**
   - 使用 CSS 变量进行主题定制，避免直接覆盖组件样式
   - 优先使用 Element Plus 提供的定制化方案

4. **响应式设计:**
   - 注意在不同设备上的组件展现，特别是表单和表格组件
   - 使用 Element Plus 提供的响应式布局工具

5. **按需导入:**
   - 使用 Element Plus 的按需导入功能，减小打包体积
   - 避免全局导入所有组件

## 版本兼容性

1. 定期更新 Element Plus 版本，及时获取新功能和安全修复
2. 升级前先查阅官方发布说明，了解可能的破坏性变更
3. 在更新主版本号时，务必全面测试应用功能
4. 避免在同一项目中混用不同版本的 Element Plus 组件
