---
description: 
globs: 
alwaysApply: true
---
# 性能优化规范

## 前端性能优化

### Vue 组件优化

1. **响应式数据优化**
   - 避免将大型数据结构直接用于响应式
   - 使用 `shallowRef` 和 `shallowReactive` 用于大型数据结构
   - 不需要响应式的数据使用普通变量而非 `ref` 或 `reactive`

2. **计算属性与侦听器**
   - 合理使用计算属性缓存计算结果
   - 计算属性中不要有副作用，需要副作用时使用侦听器
   - 避免在计算属性中进行耗时操作

3. **组件渲染优化**
   - 使用 `v-once` 渲染静态内容
   - 合理拆分组件，避免单个组件过于复杂
   - 使用 `v-memo` 缓存基于特定依赖的子树

### 列表渲染优化

1. **大型列表**
   - 使用虚拟滚动技术处理大型列表（如表格数据）
   - 合理设置分页大小，避免一次加载过多数据
   - 为 `v-for` 循环提供唯一且稳定的 `key`

2. **延迟加载**
   - 组件按需加载（如 `defineAsyncComponent`）
   - 路由组件懒加载
   - 图片使用懒加载技术

### 资源加载优化

1. **代码分割**
   - 使用动态导入拆分代码包
   - 按路由切分代码
   - 将第三方库单独打包

2. **静态资源**
   - 图片适当压缩，考虑使用 WebP 格式
   - SVG 图标优先使用图标字体或 Iconify
   - 避免加载不必要的大型依赖

## Electron 性能优化

1. **窗口创建**
   - 减少不必要的窗口创建
   - 使用 `BrowserWindow` 的 `show: false` 选项，在窗口准备好后再显示

2. **IPC 通信**
   - 避免频繁的 IPC 通信
   - 批量处理数据而非单条发送
   - 复杂数据使用共享内存或临时文件传递

3. **主进程优化**
   - 避免在主进程中进行 CPU 密集型操作
   - 使用 worker_threads 处理耗时任务
   - 定期检查内存使用情况，避免内存泄漏

## 数据库操作优化

1. **查询优化**
   - 使用索引加速查询
   - 只获取必要的列数据
   - 复杂查询进行分解，避免一次查询过多表

2. **连接池管理**
   - 合理配置连接池大小
   - 及时释放不再使用的连接
   - 监控连接使用情况，避免连接泄漏

3. **批量操作**
   - 使用事务和批量插入/更新
   - 大型数据集分批处理
   - 利用数据库存储过程减少网络往返

## 内存管理

1. **内存泄漏防止**
   - 及时清理不再使用的事件监听器
   - 避免闭包导致的意外引用保持
   - 使用 WeakMap/WeakSet 存储对象引用

2. **大型数据处理**
   - 处理完大型数据后手动清空引用
   - 使用流式处理大文件
   - 考虑使用 Web Workers 处理耗时计算

## 调试与监控

1. **性能监控**
   - 在开发环境使用 Vue Devtools 监控组件性能
   - 为关键操作添加性能标记（Performance API）
   - 监控内存使用趋势，及时发现问题

2. **问题诊断**
   - 使用 Chrome DevTools 进行性能分析
   - 及时记录性能异常
   - 为重要操作添加耗时日志
