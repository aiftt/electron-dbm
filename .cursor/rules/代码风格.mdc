---
description: 
globs: 
alwaysApply: true
---
# 代码风格规范

## 1. 代码格式

### 1.1 缩进与空格

- 使用 2 个空格作为缩进
- 不使用 Tab 字符
- 在逗号、冒号、分号后添加一个空格
- 在运算符前后各添加一个空格

### 1.2 行宽与换行

- 每行代码长度不超过 100 个字符
- 超过行宽限制时应换行，并保持良好的缩进
- 链式调用时，每个方法调用应当独占一行

### 1.3 括号与换行

- 大括号 `{}` 始终采用 K&R 风格（左大括号不换行，右大括号独占一行）
- 每个代码块前后都应有空行，增加可读性
- `if`、`for`、`while` 等语句即使只有一行，也要使用大括号

## 2. 命名规范

### 2.1 文件命名

- 组件文件使用 PascalCase 命名，如 `TableViewPage.vue`
- 服务和工具文件使用 kebab-case 命名，如 `database-service.ts`
- CSS 文件使用 kebab-case 命名，如 `main-layout.css`

### 2.2 变量命名

- 变量和函数名使用 camelCase 命名，如 `connectionForm`
- 常量使用大写 SNAKE_CASE 命名，如 `MAX_CONNECTIONS`
- 私有变量、方法前可加下划线，如 `_privateMethod`
- 布尔变量命名应表明其含义，如 `isLoading`、`hasError`

### 2.3 组件命名

- 组件名使用 PascalCase，如 `QueryBuilder`
- 组件 props 使用 camelCase，如 `tableName`
- 事件名使用 kebab-case，如 `@update:model-value`

### 2.4 类型命名

- 接口名使用 PascalCase 并以 `I` 开头，如 `IUserData`
- 类型别名使用 PascalCase，如 `ConnectionType`
- 枚举使用 PascalCase，如 `StatusEnum`
- 泛型参数使用单个大写字母，如 `T`、`K`、`V`

## 3. 注释规范

### 3.1 文档注释

- 每个导出的函数、类、接口都应有文档注释
- 使用 JSDoc 风格的注释
- 描述功能、参数和返回值

```typescript
/**
 * 测试数据库连接
 * @param connection 数据库连接配置
 * @returns 连接测试结果
 */
async function testConnection(connection: DbConnection): Promise<TestResult> {
  // 实现...
}
```

### 3.2 内联注释

- 复杂逻辑应当添加注释说明
- 注释应当解释"为什么"而不是"是什么"
- 注释应当保持最新，与代码同步更新

## 4. Vue 相关规范

### 4.1 组件结构

- 组件按照 `<template>`, `<script>`, `<style>` 的顺序组织
- 使用组合式 API (`<script setup>`)
- 组件内部代码结构按照以下顺序组织:
  1. Props 和 Emits 定义
  2. 数据响应式变量
  3. 计算属性
  4. 方法
  5. 生命周期钩子

### 4.2 模板规范

- 属性顺序：v-指令 → 事件 → 属性 → style/class
- 多个属性时每个属性独占一行
- v-for 必须搭配 key 使用
- 避免在模板中使用复杂的表达式，复杂逻辑应当放在计算属性中

### 4.3 样式规范

- 优先使用 scoped 样式
- 样式选择器使用 kebab-case
- 避免使用 !important
- 使用 CSS 变量管理主题和配色
