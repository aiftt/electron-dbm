---
description: 
globs: 
alwaysApply: true
---
# 协作规范

## 版本控制

### Git 分支管理

1. **分支命名**
   - `main`: 主分支，保持随时可发布状态
   - `dev`: 开发分支，所有功能开发完成后合并到此分支
   - `feature/name`: 功能分支，用于开发新功能
   - `fix/name`: 修复分支，用于修复 bug
   - `release/version`: 发布分支，用于准备发布

2. **工作流程**
   - 从 `dev` 分支创建功能分支或修复分支
   - 完成开发后提交 Pull Request 到 `dev` 分支
   - 经过代码审查后合并到 `dev` 分支
   - 发布前将 `dev` 分支合并到 `release` 分支进行测试
   - 测试通过后将 `release` 分支合并到 `main` 分支

3. **合并策略**
   - 优先使用 "Squash and merge" 保持主分支历史干净
   - 确保合并前通过所有测试
   - 解决所有冲突后再提交合并请求

## 提交规范

1. **提交信息格式**
   ```
   <类型>(<范围>): <简短描述>
   
   <详细描述>
   
   <相关 issue>
   ```

2. **类型说明**
   - `feat`: 新功能
   - `fix`: 修复 bug
   - `docs`: 文档更新
   - `style`: 代码风格调整（不影响功能）
   - `refactor`: 代码重构（既不是新功能也不是修复 bug）
   - `perf`: 性能优化
   - `test`: 添加或修改测试
   - `chore`: 构建过程或辅助工具的变动

3. **提交规则**
   - 每次提交应当聚焦于单一变更
   - 提交前进行本地测试，确保不破坏现有功能
   - 较大变更应拆分为多个小的提交

## 代码审查

1. **审查流程**
   - 提交 Pull Request 时指定至少一名审查者
   - 审查者在 24 小时内给予反馈
   - 所有评论解决后才能合并

2. **审查重点**
   - 代码逻辑是否正确
   - 是否遵循项目代码规范
   - 是否有适当的测试覆盖
   - 性能和安全问题
   - 可维护性和可读性

3. **反馈准则**
   - 针对代码而非开发者个人
   - 提供具体的改进建议
   - 指出优点的同时指出可改进的地方

## 问题跟踪

1. **Issue 创建**
   - 使用合适的模板创建 issue
   - 提供复现步骤和预期行为
   - 添加适当的标签（bug、enhancement、question 等）

2. **Issue 处理流程**
   - 新建 issue 先由项目维护者分配
   - 被分配的开发者确认并估计工作量
   - 完成后通过关联的 PR 关闭 issue

3. **Bug 报告要求**
   - 清晰描述问题现象
   - 提供环境信息（操作系统、浏览器版本等）
   - 如可能，附上截图或录屏

## 项目文档

1. **文档更新**
   - 代码变更时同步更新相关文档
   - 新功能必须提供使用文档
   - API 变更需要更新 API 文档

2. **文档类型**
   - README: 项目概述和快速开始
   - CONTRIBUTING: 贡献指南
   - API 文档: 详细的 API 说明
   - 用户手册: 最终用户使用指南

## 沟通协作

1. **工作同步**
   - 每周进行一次团队同步会议
   - 使用项目管理工具跟踪任务进度
   - 重要决策需要在会议中讨论并记录

2. **知识共享**
   - 复杂问题的解决方案需要文档化
   - 鼓励技术分享和代码复盘
   - 建立团队知识库
