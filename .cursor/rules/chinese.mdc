---
description: 
globs: 
alwaysApply: true
---
# 语言规范

## 开发语言规范

### 回答规范

- 总是以中文回答问题

### 通用规范

1. **语言选择**
   - 前端开发使用 TypeScript
   - 配置文件使用 JSON 或 YAML
   - 脚本使用 Node.js

2. **文档语言**
   - 所有文档、注释和提交信息使用中文
   - API 名称、变量名、函数名使用英文
   - 技术术语优先使用英文术语，必要时可附加中文解释

3. **字符编码**
   - 所有文件统一使用 UTF-8 编码
   - 行尾使用 LF（Unix 风格换行）

### TypeScript 规范

1. **类型系统**
   - 优先使用接口（`interface`）定义对象类型
   - 为所有函数参数和返回值定义类型
   - 避免使用 `any` 类型，优先使用 `unknown`
   - 使用联合类型(`|`)和交叉类型(`&`)表达复杂类型

2. **类型定义**
   - 接口和类型别名使用 PascalCase
   - 导出的类型定义放在单独的文件中（如 `types.ts`）
   - 泛型参数命名有意义，避免单纯使用 `T`、`U` 等

3. **类型检查**
   - 启用严格模式 (`"strict": true`)
   - 启用额外类型检查选项
     - `"noImplicitAny": true`
     - `"strictNullChecks": true`
     - `"strictFunctionTypes": true`

4. **类型断言**
   - 优先使用 `as` 语法而非尖括号语法
   - 仅在必要时使用类型断言
   - 使用类型谓词（type predicates）进行类型守卫

### Vue 规范

1. **组件风格**
   - 使用 Composition API 和 `<script setup>` 语法
   - 组件 props 使用 `defineProps<{...}>()` 定义类型
   - 组件事件使用 `defineEmits<{...}>()` 定义类型

2. **模板语法**
   - 指令简写：`@` 代替 `v-on:`，`:` 代替 `v-bind:`
   - 复杂表达式放入计算属性或方法，保持模板简洁
   - 组件模板中的文本使用中文

3. **Vue 类型系统**
   - 使用 `PropType` 为复杂 props 类型提供类型支持
   - 使用 TypeScript 泛型正确类型化 ref 和 reactive

## 代码注释规范

1. **注释语言**
   - 所有注释使用中文
   - 技术术语、专有名词可使用英文

2. **注释内容**
   - 解释复杂逻辑和非显而易见的代码
   - 记录重要决策和设计思考
   - 标记需要后续处理的代码（TODO, FIXME 等）

3. **注释格式**
   - 使用 JSDoc 风格的块注释
   ```typescript
   /**
    * 函数描述
    * @param 参数名 参数描述
    * @returns 返回值描述
    */
   ```
   - 行注释使用 `//` 并缩进与代码对齐

## 项目文档规范

1. **必要文档**
   - README.md: 项目概述、快速开始、基本使用
   - CONTRIBUTING.md: 贡献指南
   - CHANGELOG.md: 版本变更记录

2. **文档格式**
   - 使用 Markdown 格式
   - 文档内容使用中文
   - 代码示例使用代码块包裹并指定语言

3. **文档结构**
   - 使用标题层级表示文档结构
   - 重要信息使用加粗、斜体等强调
   - 使用列表和表格组织复杂信息

## 交流与协作语言

1. **团队交流**
   - 代码评审使用中文
   - 技术讨论使用中文，技术术语可使用英文
   - 会议和演示使用中文

2. **问题报告**
   - Bug 报告使用中文描述问题
   - 提供清晰的复现步骤
   - 错误信息可保留英文原文
