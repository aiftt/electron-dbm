---
description: 
globs: 
alwaysApply: true
---
# 禁止事项

## 代码相关禁止事项

1. **代码质量**
   - 禁止提交未经测试的代码到共享分支
   - 禁止提交含有 console.log 的代码（除非经过特别标记）
   - 禁止提交被注释掉的大段代码
   - 禁止硬编码敏感信息（密码、API密钥等）

2. **编码实践**
   - 禁止使用 `any` 类型逃避类型检查
   - 禁止使用 `eval()` 和其他不安全的函数
   - 禁止使用已废弃的 API 和特性
   - 禁止忽略或抑制编译器/Linter 警告而不说明原因

3. **性能与安全**
   - 禁止在生产环境中暴露详细错误信息
   - 禁止执行未经验证的用户输入
   - 禁止在渲染进程中使用高权限 Node.js API
   - 禁止禁用安全相关的 Electron 设置

## 项目管理禁止事项

1. **版本控制**
   - 禁止直接向主分支提交代码
   - 禁止强制推送（force push）到共享分支
   - 禁止提交二进制文件到代码仓库（除非必要）
   - 禁止在提交中包含与当前任务无关的改动

2. **依赖管理**
   - 禁止使用未经团队讨论的新框架或库
   - 禁止使用有已知安全漏洞的依赖版本
   - 禁止在不更新锁定文件的情况下更新 package.json
   - 禁止使用不再维护的库

3. **文档与注释**
   - 禁止代码变更而不更新相关文档
   - 禁止删除或修改重要注释
   - 禁止提交缺少必要注释的复杂代码
   - 禁止使用对他人无意义的个人缩写

## 协作与沟通禁止事项

1. **代码审查**
   - 禁止未经代码审查直接合并代码
   - 禁止忽略代码审查中的严重问题
   - 禁止在代码审查中使用人身攻击或不专业语言
   - 禁止不回应代码审查评论就关闭Pull Request

2. **团队协作**
   - 禁止私下修改共享配置而不通知团队
   - 禁止长时间占用共享测试环境不释放
   - 禁止未经讨论修改项目关键架构
   - 禁止擅自变更已达成共识的设计决策

## 技术债务管理

1. **临时解决方案**
   - 禁止使用临时解决方案而不添加 TODO 注释
   - 禁止复制粘贴代码而不进行适当重构
   - 禁止使用魔法数字或字符串常量而不定义常量
   - 禁止留下已知但未修复的 bug

2. **代码维护**
   - 禁止为图快而明显牺牲代码质量
   - 禁止不遵循项目既定模式和风格
   - 禁止过早优化不是性能瓶颈的代码
   - 禁止遗留"僵尸代码"（不再使用但未删除的代码）

## 数据安全与隐私

1. **数据处理**
   - 禁止在客户端存储未加密的敏感数据
   - 禁止在日志中记录敏感信息
   - 禁止未经授权的数据收集
   - 禁止忽视用户数据导出和删除功能

2. **凭证管理**
   - 禁止在不安全的位置存储凭证
   - 禁止在团队沟通中分享未加密的凭证
   - 禁止重用生产环境和开发环境的密钥
   - 禁止在源代码中存储真实环境凭证
