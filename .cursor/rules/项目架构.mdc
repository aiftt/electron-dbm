---
description: 
globs: 
alwaysApply: true
---
# 项目架构规范

## 目录结构

本项目采用以下目录结构：

```
electron-dbm/
├── src/                  # 前端源代码
│   ├── assets/           # 静态资源文件
│   ├── components/       # 可复用组件
│   ├── layouts/          # 页面布局组件
│   ├── pages/            # 页面组件
│   ├── router/           # 路由配置
│   ├── services/         # 服务层 (API 调用、业务逻辑)
│   ├── utils/            # 工具函数
│   ├── App.vue           # 根组件
│   └── main.ts           # 入口文件
├── electron/             # Electron 相关代码
│   ├── main/             # 主进程代码
│   └── preload/          # 预加载脚本
├── public/               # 公共静态资源
└── dist-electron/        # Electron 构建输出目录
```

## 模块职责

### 前端 (src/)

1. **components/**: 存放可复用的 UI 组件
   - 组件应当是纯展示型的，不包含业务逻辑
   - 每个组件应当有自己的目录，包含 .vue 文件和相关资源

2. **pages/**: 存放页面级组件
   - 每个页面对应一个 Vue 组件
   - 页面组件负责整合各个小组件，实现页面功能
   - 页面组件可以包含业务逻辑或调用服务

3. **services/**: 存放服务层代码
   - 数据库服务 (DatabaseService)
   - 查询历史服务 (QueryHistoryService)
   - SQL 格式化服务 (SqlFormatterService)
   - 所有与后端或本地数据交互的逻辑都应放在此处

4. **utils/**: 存放工具函数
   - 存储工具 (storage.ts)
   - 通用工具函数
   - 不包含业务逻辑的纯工具函数

### Electron (electron/)

1. **main/**: 主进程代码
   - 窗口管理
   - IPC 通信
   - 系统集成

2. **preload/**: 预加载脚本
   - 安全地暴露 Electron API 给渲染进程

## 模块通信

1. **前端内部通信**:
   - 组件间通信使用 props 和 events
   - 全局状态管理使用 Pinia

2. **与 Electron 通信**:
   - 使用 IPC 通道进行通信
   - 遵循上下文隔离原则
   - 通过预加载脚本暴露的 API 进行调用

## 数据流向

1. **UI 交互**:
   - 用户操作 → 页面组件 → 服务层 → 本地存储/数据库

2. **数据获取**:
   - 本地存储/数据库 → 服务层 → 页面组件 → UI 展示

## 分层原则

1. 保持关注点分离，UI 组件不直接访问数据库或存储
2. 服务层负责所有数据处理和业务逻辑
3. 工具函数应当是通用的，不包含特定业务逻辑
4. 每一层只依赖其下层，不应产生循环依赖
