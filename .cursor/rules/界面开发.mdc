---
description: 
globs: 
alwaysApply: true
---
# 界面开发规范

## 组件使用原则

1. **组件化开发**
   - 将界面拆分为可复用的组件
   - 组件应当职责单一，遵循单一职责原则
   - 公共组件放置在 `components` 目录，页面特有组件可内嵌在页面文件中

2. **Element Plus 组件使用**
   - 优先使用 Element Plus 提供的组件，保持风格统一
   - 遵循 [Element Plus 规范](mdc:element-plus规范.mdc)
   - 不要修改 Element Plus 组件的内部样式，应使用组件提供的 props 和插槽

3. **自定义组件**
   - 自定义组件应遵循和 Element Plus 相一致的设计风格
   - 为复杂组件提供适当的文档和示例
   - 组件应支持主题切换（亮色/暗色模式）

## 布局规范

1. **响应式布局**
   - 使用 TailwindCSS 的响应式工具类
   - 页面应适配不同尺寸的屏幕（最小支持 800x600）
   - 主要功能区域在不滚动的情况下可见

2. **基本布局结构**
   - 所有页面应使用统一的布局组件（MainLayout）
   - 布局组合：顶部导航栏 + 侧边菜单 + 内容区域
   - 弹性布局优先，确保内容区域能够充分利用可用空间

3. **空间利用**
   - 内容密度适中，避免过于拥挤或过于稀疏
   - 使用合适的间距和对齐方式，确保视觉整洁
   - 表格和列表内容在有限空间内展示尽可能多的信息

## 样式规范

1. **样式管理**
   - 使用 TailwindCSS 工具类优先
   - 组件特定样式使用 `<style scoped>` 限制作用域
   - 全局样式定义在专门的样式文件中，并限制使用

2. **颜色使用**
   - 使用 TailwindCSS 提供的颜色变量或 CSS 变量
   - 支持深色模式，使用 `dark:` 前缀类
   - 确保文本与背景的对比度符合无障碍访问标准

3. **图标使用**
   - 使用 Iconify 图标库，保持图标风格统一
   - 图标尺寸与周围文本协调
   - 为纯图标按钮添加合适的 tooltip 提示

## 交互规范

1. **数据加载**
   - 长时间操作需显示加载状态
   - 表格数据加载时使用骨架屏或加载占位符
   - 避免界面在加载过程中布局跳动

2. **表单交互**
   - 所有表单需要进行客户端验证
   - 错误信息应当清晰明确，并靠近相关表单项
   - 保存操作应显示成功/失败反馈

3. **反馈机制**
   - 使用 ElMessage 提供操作反馈
   - 对于风险操作（如删除）必须提供确认机制
   - 使用适当的视觉提示表达交互状态（悬停、激活等）

## 可用性规范

1. **可访问性**
   - 所有交互元素可通过键盘访问
   - 提供适当的 aria 属性增强屏幕阅读器支持
   - 图片和图标应提供替代文本

2. **错误处理**
   - 用户错误应有明确的改正指导
   - 系统错误应提供重试或替代方案
   - 避免使用技术术语描述错误

3. **用户引导**
   - 复杂功能提供操作引导或提示
   - 空状态提供明确的开始行动指引
   - 首次使用的功能考虑提供简短教程
